// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Everything Mandalazz",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }

// app/layout.js
'use client';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useState } from 'react';
import './globals.css';
import { Figtree } from '@next/font/google';
import Navbar from '../component/reusables/Navbar';
import Categories from '../component/reusables/Categories';
import HeroSection from '../component/reusables/Hero';
import Footer from '../component/reusables/Footer';
import { usePathname } from 'next/navigation';

const figtree = Figtree({
  subsets: ['latin'],
  weight: ['400', '500', '700'],
  fallback: ['Arial', 'sans-serif'],
});

export default function RootLayout({ children }) {
  const [queryClient] = useState(() => new QueryClient());
  const pathname = usePathname();
  const isDetailPage = pathname.startsWith('/viewProductDetails');
  const isAuthPage =
  pathname.startsWith('/signup') ||
  pathname.startsWith('/login') ||
  pathname.startsWith('/checkEmail') ||
  pathname.startsWith('/forgotPassword') ||
  pathname.startsWith('/resetPassword') ||
  pathname.startsWith('/verify') ||
  pathname.startsWith('/validation');

  // return (
  //   <html lang="en" className={figtree.className}>
  //     <body>
  //       <QueryClientProvider client={queryClient}>
  //         <Navbar />
  //         <div className='pt-18'>
  //         <Categories />
  //         {!isDetailPage && <HeroSection />}
  //         {children}
  //         {!isDetailPage && <Footer />}
  //         </div>
  //       </QueryClientProvider>
  //     </body>
  //   </html>
  // );
   return (
    <html lang="en" className={figtree.className}>
      <body>
        <QueryClientProvider client={queryClient}>
          {!isAuthPage ? (
            <>
              <Navbar />
              <div className="pt-18">
                <Categories />
                {!isDetailPage && <HeroSection />}
                {children}
                {!isDetailPage && <Footer />}
              </div>
            </>
          ) : (
            // If auth page, render only children
            children
          )}
        </QueryClientProvider>
      </body>
    </html>
  );
}
